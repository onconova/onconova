# Code autogenerated by Fhircraft 0.3.1 on 2025-10-09 07:26:47.975319.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel,FHIRSliceModel
 
from typing import Optional,List,Annotated,Union,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,PositiveInt,Date,DateTime,Boolean
 
from fhircraft.fhir.resources.datatypes.R4.complex_types import Element,Meta,Narrative,Resource,Extension,Period,CodeableConcept,Duration,Identifier,Reference,Annotation,BackboneElement
 
from fhircraft.fhir.resources.validators import get_type_choice_value_by_base,validate_element_constraint,validate_type_choice_element,validate_model_constraint,validate_slicing_cardinalities,validate_FHIR_element_pattern,validate_contained_resource

 
class TherapyLinePeriod(FHIRSliceModel):
    """
    The period during which the therapy line was performed.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-period'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-period",
    )
    valuePeriod: Optional[Period] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Period],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class TherapyLineNumber(FHIRSliceModel):
    """
    The number representing the sequence of the therapy line in the overall treatment regimen.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-number'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-number",
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[PositiveInt],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class TherapyLineIntent(FHIRSliceModel):
    """
    The intent of the therapy line, such as curative or palliative.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-intent'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-intent",
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[CodeableConcept],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class TherapyLineProgressionFreeSurvival(FHIRSliceModel):
    """
    The progression-free survival duration for the therapy line.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-progression-free-survival'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-progression-free-survival",
    )
    valueDuration: Optional[Duration] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Duration],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class TherapyLineProgressionDate(FHIRSliceModel):
    """
    The date when disease progression was observed during or after the therapy line.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-progression-date'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-therapy-line-progression-date",
    )
    valueDate: Optional[Date] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Date],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class TherapyLineProgressionDateEntry(BackboneElement):
    """
    Entries in this list.
    """
    flag: Optional[CodeableConcept] = Field(
        description="Status/Workflow information about this item",
        default=None,
    )
    deleted: Optional[Boolean] = Field(
        description="If this item is actually marked as deleted",
        default=None,
    )
    deleted_ext: Optional[Element] = Field(
        description="Placeholder element for deleted extensions",
        default=None,
        alias="_deleted",
    )
    date: Optional[DateTime] = Field(
        description="When item added to list",
        default=None,
    )
    date_ext: Optional[Element] = Field(
        description="Placeholder element for date extensions",
        default=None,
        alias="_date",
    )
    item: Optional[Reference] = Field(
        description="Actual entry",
        default=None,
    )


    @field_validator(*('item', 'date', 'deleted', 'flag', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )


 
class TherapyLineProgressionDate(FHIRBaseModel):
    """
    A profile representing a line of therapy in a cancer treatment regimen, including details about the therapy line number, associated treatments, and relevant dates. 

Due to its abstract conceptual nature, it is based on a FHIR `List` to capture the specific resources involved in the therapy line. Therapy lines in Onconova are assigned automatically based on existing Procedure and MedicationAdministration resources and are not created manually.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        title="Meta",
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='0.1.0', profile=['http://luisfabib.github.io/onconova/StructureDefinition/onconova-therapy-line']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Annotated[Union[TherapyLinePeriod, TherapyLineNumber, TherapyLineIntent, TherapyLineProgressionFreeSurvival, "TherapyLineProgressionDate", Extension], Field(union_mode='left_to_right')]]] = Field(
        description="Extension",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="Business identifier",
        default=None,
    )
    status: Code = Field(
        description="current | retired | entered-in-error",
        default="current",
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    mode: Code = Field(
        description="working | snapshot | changes",
        default="working",
    )
    mode_ext: Optional[Element] = Field(
        description="Placeholder element for mode extensions",
        default=None,
        alias="_mode",
    )
    title: Optional[String] = Field(
        description="Descriptive name for the list",
        default=None,
    )
    title_ext: Optional[Element] = Field(
        description="Placeholder element for title extensions",
        default=None,
        alias="_title",
    )
    code: CodeableConcept = Field(
        description="What the purpose of this list is",
        default_factory=lambda: CodeableConcept(coding=[{'system': 'http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl', 'code': 'C133518', 'display': 'Line of Therapy'}]),
    )
    subject: Optional[Reference] = Field(
        description="The patient receiving the therapy",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Not used in this profile",
        default=None,
    )
    date: Optional[DateTime] = Field(
        description="Not used in this profile",
        default=None,
    )
    date_ext: Optional[Element] = Field(
        description="Placeholder element for date extensions",
        default=None,
        alias="_date",
    )
    source: Optional[Reference] = Field(
        description="Not used in this profile",
        default=None,
    )
    orderedBy: Optional[CodeableConcept] = Field(
        description="What order the list has",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Comments about the list",
        default=None,
    )
    entry: Optional[List[TherapyLineProgressionDateEntry]] = Field(
        description="The therapies or procedures that are part of this therapy line",
        default=None,
    )
    emptyReason: Optional[CodeableConcept] = Field(
        description="Why list is empty",
        default=None,
    )
    resourceType: Literal['List'] = Field(
        description=None,
        default="List",
    )


    @field_validator(*('emptyReason', 'entry', 'note', 'orderedBy', 'source', 'date', 'encounter', 'subject', 'code', 'title', 'mode', 'status', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def extension_slicing_cardinality_validator(cls, value):    
        return validate_slicing_cardinalities(cls, value, 
            field_name="extension",
        )



    @field_validator(*('status',), mode="after", check_fields=None)
    @classmethod
    def FHIR_status_pattern_constraint(cls, value):    
        return validate_FHIR_element_pattern(cls, value, 
            pattern="current",
        )



    @field_validator(*('mode',), mode="after", check_fields=None)
    @classmethod
    def FHIR_mode_pattern_constraint(cls, value):    
        return validate_FHIR_element_pattern(cls, value, 
            pattern="working",
        )



    @field_validator(*('code',), mode="after", check_fields=None)
    @classmethod
    def FHIR_code_pattern_constraint(cls, value):    
        return validate_FHIR_element_pattern(cls, value, 
            pattern=CodeableConcept(coding=[{'system': 'http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl', 'code': 'C133518', 'display': 'Line of Therapy'}]),
        )



    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return validate_contained_resource(cls, value, 
            release="R4",
        )




    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )



    @model_validator(mode="after")
    def FHIR_lst_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="emptyReason.empty() or entry.empty()",
            human="A list can only have an emptyReason if it is empty",
            key="lst-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_lst_2_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="mode = 'changes' or entry.deleted.empty()",
            human="The deleted flag can only be used if the mode of the list is \"changes\"",
            key="lst-2",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_lst_3_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="mode = 'working' or entry.date.empty()",
            human="An entry date can only be used if the mode of the list is \"working\"",
            key="lst-3",
            severity="error",
        )


