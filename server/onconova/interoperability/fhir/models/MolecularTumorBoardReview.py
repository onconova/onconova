# Code autogenerated by Fhircraft 0.3.1 on 2025-10-09 07:27:00.119810.

# Fhircraft modules
import fhircraft
from fhircraft.utils import model_rebuild_all
from fhircraft.fhir.resources.datatypes.primitives import *
from fhircraft.fhir.resources.base import FHIRBaseModel
import fhircraft.fhir.resources.validators as fhir_validators
# Pydantic modules
from pydantic import Field, field_validator, model_validator, BaseModel
from pydantic.fields import FieldInfo

# Standard modules
from typing import Optional, Literal, Union
from enum import Enum
NoneType = type(None)

# Dynamic modules 
 
from fhircraft.fhir.resources.base import FHIRBaseModel,FHIRSliceModel
 
from typing import Optional,List,Annotated,Union,Literal
 
from fhircraft.fhir.resources.datatypes.primitives import String,Uri,Code,Base64Binary,Boolean,Canonical,Date,DateTime,Decimal,Id,Instant,Integer,Markdown,Oid,PositiveInt,Time,UnsignedInt,Url,Uuid
 
from fhircraft.fhir.resources.datatypes.R4.complex_types import Element,Meta,Narrative,Resource,Extension,Address,Age,Annotation,Attachment,CodeableConcept,Coding,ContactPoint,Count,Distance,Duration,HumanName,Identifier,Money,Period,Quantity,Range,Ratio,Reference,SampledData,Signature,Timing,ContactDetail,Contributor,DataRequirement,Expression,ParameterDefinition,RelatedArtifact,TriggerDefinition,UsageContext,Dosage,BackboneElement
 
from fhircraft.fhir.resources.validators import get_type_choice_value_by_base,validate_element_constraint,validate_type_choice_element,validate_slicing_cardinalities,validate_model_constraint,validate_FHIR_element_pattern,validate_contained_resource

 
class ClinicalTrial(Extension):
    """
    Extension
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['clinicalTrial'] = Field(
        description="identifies the meaning of the extension",
        default="clinicalTrial",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[String],
            field_name_base="value",
            required=False,
        )

 
class Medication(Extension):
    """
    Extension
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['medication'] = Field(
        description="identifies the meaning of the extension",
        default="medication",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[CodeableConcept],
            field_name_base="value",
            required=False,
        )

 
class SupportingEvidence(Extension):
    """
    Extension
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['supportingEvidence'] = Field(
        description="identifies the meaning of the extension",
        default="supportingEvidence",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Reference],
            field_name_base="value",
            required=False,
        )

 
class ExpectedEffect(Extension):
    """
    Extension
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['expectedEffect'] = Field(
        description="identifies the meaning of the extension",
        default="expectedEffect",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[CodeableConcept],
            field_name_base="value",
            required=False,
        )

 
class OffLabelUse(Extension):
    """
    Extension
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['offLabelUse'] = Field(
        description="identifies the meaning of the extension",
        default="offLabelUse",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Boolean],
            field_name_base="value",
            required=False,
        )

 
class WithinSoc(Extension):
    """
    Extension
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['withinSoc'] = Field(
        description="identifies the meaning of the extension",
        default="withinSoc",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Boolean],
            field_name_base="value",
            required=False,
        )

 
class MolecularTumorBoardTherapeuticRecommendation(FHIRSliceModel):
    """
    A therapeutic recommendation or follow-up action resulting from a molecular tumor board review.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[List[Annotated[Union[ClinicalTrial, Medication, SupportingEvidence, ExpectedEffect, OffLabelUse, WithinSoc, Extension], Field(union_mode='left_to_right')]]] = Field(
        description="Additional content defined by implementations",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-molecular-tumor-board-therapeutic-recommendation'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-molecular-tumor-board-therapeutic-recommendation",
    )
    valueBase64Binary: Optional[Base64Binary] = Field(
        description="Value of extension",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Value of extension",
        default=None,
    )
    valueCanonical: Optional[Canonical] = Field(
        description="Value of extension",
        default=None,
    )
    valueCode: Optional[Code] = Field(
        description="Value of extension",
        default=None,
    )
    valueDate: Optional[Date] = Field(
        description="Value of extension",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Value of extension",
        default=None,
    )
    valueDecimal: Optional[Decimal] = Field(
        description="Value of extension",
        default=None,
    )
    valueId: Optional[Id] = Field(
        description="Value of extension",
        default=None,
    )
    valueInstant: Optional[Instant] = Field(
        description="Value of extension",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Value of extension",
        default=None,
    )
    valueMarkdown: Optional[Markdown] = Field(
        description="Value of extension",
        default=None,
    )
    valueOid: Optional[Oid] = Field(
        description="Value of extension",
        default=None,
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        description="Value of extension",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Value of extension",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Value of extension",
        default=None,
    )
    valueUnsignedInt: Optional[UnsignedInt] = Field(
        description="Value of extension",
        default=None,
    )
    valueUri: Optional[Uri] = Field(
        description="Value of extension",
        default=None,
    )
    valueUrl: Optional[Url] = Field(
        description="Value of extension",
        default=None,
    )
    valueUuid: Optional[Uuid] = Field(
        description="Value of extension",
        default=None,
    )
    valueAddress: Optional[Address] = Field(
        description="Value of extension",
        default=None,
    )
    valueAge: Optional[Age] = Field(
        description="Value of extension",
        default=None,
    )
    valueAnnotation: Optional[Annotation] = Field(
        description="Value of extension",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Value of extension",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Value of extension",
        default=None,
    )
    valueCoding: Optional[Coding] = Field(
        description="Value of extension",
        default=None,
    )
    valueContactPoint: Optional[ContactPoint] = Field(
        description="Value of extension",
        default=None,
    )
    valueCount: Optional[Count] = Field(
        description="Value of extension",
        default=None,
    )
    valueDistance: Optional[Distance] = Field(
        description="Value of extension",
        default=None,
    )
    valueDuration: Optional[Duration] = Field(
        description="Value of extension",
        default=None,
    )
    valueHumanName: Optional[HumanName] = Field(
        description="Value of extension",
        default=None,
    )
    valueIdentifier: Optional[Identifier] = Field(
        description="Value of extension",
        default=None,
    )
    valueMoney: Optional[Money] = Field(
        description="Value of extension",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Value of extension",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Value of extension",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Value of extension",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Value of extension",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Value of extension",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Value of extension",
        default=None,
    )
    valueSignature: Optional[Signature] = Field(
        description="Value of extension",
        default=None,
    )
    valueTiming: Optional[Timing] = Field(
        description="Value of extension",
        default=None,
    )
    valueContactDetail: Optional[ContactDetail] = Field(
        description="Value of extension",
        default=None,
    )
    valueContributor: Optional[Contributor] = Field(
        description="Value of extension",
        default=None,
    )
    valueDataRequirement: Optional[DataRequirement] = Field(
        description="Value of extension",
        default=None,
    )
    valueExpression: Optional[Expression] = Field(
        description="Value of extension",
        default=None,
    )
    valueParameterDefinition: Optional[ParameterDefinition] = Field(
        description="Value of extension",
        default=None,
    )
    valueRelatedArtifact: Optional[RelatedArtifact] = Field(
        description="Value of extension",
        default=None,
    )
    valueTriggerDefinition: Optional[TriggerDefinition] = Field(
        description="Value of extension",
        default=None,
    )
    valueUsageContext: Optional[UsageContext] = Field(
        description="Value of extension",
        default=None,
    )
    valueDosage: Optional[Dosage] = Field(
        description="Value of extension",
        default=None,
    )
    valueMeta: Optional[Meta] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def extension_slicing_cardinality_validator(cls, value):    
        return validate_slicing_cardinalities(cls, value, 
            field_name="extension",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Base64Binary, Boolean, Canonical, Code, Date, DateTime, Decimal, Id, Instant, Integer, Markdown, Oid, PositiveInt, String, Time, UnsignedInt, Uri, Url, Uuid, Address, Age, Annotation, Attachment, CodeableConcept, Coding, ContactPoint, Count, Distance, Duration, HumanName, Identifier, Money, Period, Quantity, Range, Ratio, Reference, SampledData, Signature, Timing, ContactDetail, Contributor, DataRequirement, Expression, ParameterDefinition, RelatedArtifact, TriggerDefinition, UsageContext, Dosage, Meta],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_tumor_board_therapeutic_recommendation_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension('clinicalTrial').exists() or extension('medication').exists()",
            human="Either clinical trial or medication SHALL be present",
            key="tumor-board-therapeutic-recommendation-1",
            severity="error",
        )

 
class Conducted(Extension):
    """
    Molecular comparison conducted
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['conducted'] = Field(
        description="identifies the meaning of the extension",
        default="conducted",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Boolean],
            field_name_base="value",
            required=False,
        )

 
class MatchedReference(Extension):
    """
    Condition matched during molecular comparison
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['matchedReference'] = Field(
        description="identifies the meaning of the extension",
        default="matchedReference",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Reference],
            field_name_base="value",
            required=False,
        )

 
class MolecularTumorBoardMolecularComparison(FHIRSliceModel):
    """
    A comparison of molecular findings discussed during the molecular tumor board review.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[List[Annotated[Union[Conducted, MatchedReference, Extension], Field(union_mode='left_to_right')]]] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-molecular-tumor-board-molecular-comparison'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-molecular-tumor-board-molecular-comparison",
    )
    valueBase64Binary: Optional[Base64Binary] = Field(
        description="Value of extension",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Value of extension",
        default=None,
    )
    valueCanonical: Optional[Canonical] = Field(
        description="Value of extension",
        default=None,
    )
    valueCode: Optional[Code] = Field(
        description="Value of extension",
        default=None,
    )
    valueDate: Optional[Date] = Field(
        description="Value of extension",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Value of extension",
        default=None,
    )
    valueDecimal: Optional[Decimal] = Field(
        description="Value of extension",
        default=None,
    )
    valueId: Optional[Id] = Field(
        description="Value of extension",
        default=None,
    )
    valueInstant: Optional[Instant] = Field(
        description="Value of extension",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Value of extension",
        default=None,
    )
    valueMarkdown: Optional[Markdown] = Field(
        description="Value of extension",
        default=None,
    )
    valueOid: Optional[Oid] = Field(
        description="Value of extension",
        default=None,
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        description="Value of extension",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Value of extension",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Value of extension",
        default=None,
    )
    valueUnsignedInt: Optional[UnsignedInt] = Field(
        description="Value of extension",
        default=None,
    )
    valueUri: Optional[Uri] = Field(
        description="Value of extension",
        default=None,
    )
    valueUrl: Optional[Url] = Field(
        description="Value of extension",
        default=None,
    )
    valueUuid: Optional[Uuid] = Field(
        description="Value of extension",
        default=None,
    )
    valueAddress: Optional[Address] = Field(
        description="Value of extension",
        default=None,
    )
    valueAge: Optional[Age] = Field(
        description="Value of extension",
        default=None,
    )
    valueAnnotation: Optional[Annotation] = Field(
        description="Value of extension",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Value of extension",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Value of extension",
        default=None,
    )
    valueCoding: Optional[Coding] = Field(
        description="Value of extension",
        default=None,
    )
    valueContactPoint: Optional[ContactPoint] = Field(
        description="Value of extension",
        default=None,
    )
    valueCount: Optional[Count] = Field(
        description="Value of extension",
        default=None,
    )
    valueDistance: Optional[Distance] = Field(
        description="Value of extension",
        default=None,
    )
    valueDuration: Optional[Duration] = Field(
        description="Value of extension",
        default=None,
    )
    valueHumanName: Optional[HumanName] = Field(
        description="Value of extension",
        default=None,
    )
    valueIdentifier: Optional[Identifier] = Field(
        description="Value of extension",
        default=None,
    )
    valueMoney: Optional[Money] = Field(
        description="Value of extension",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Value of extension",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Value of extension",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Value of extension",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Value of extension",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Value of extension",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Value of extension",
        default=None,
    )
    valueSignature: Optional[Signature] = Field(
        description="Value of extension",
        default=None,
    )
    valueTiming: Optional[Timing] = Field(
        description="Value of extension",
        default=None,
    )
    valueContactDetail: Optional[ContactDetail] = Field(
        description="Value of extension",
        default=None,
    )
    valueContributor: Optional[Contributor] = Field(
        description="Value of extension",
        default=None,
    )
    valueDataRequirement: Optional[DataRequirement] = Field(
        description="Value of extension",
        default=None,
    )
    valueExpression: Optional[Expression] = Field(
        description="Value of extension",
        default=None,
    )
    valueParameterDefinition: Optional[ParameterDefinition] = Field(
        description="Value of extension",
        default=None,
    )
    valueRelatedArtifact: Optional[RelatedArtifact] = Field(
        description="Value of extension",
        default=None,
    )
    valueTriggerDefinition: Optional[TriggerDefinition] = Field(
        description="Value of extension",
        default=None,
    )
    valueUsageContext: Optional[UsageContext] = Field(
        description="Value of extension",
        default=None,
    )
    valueDosage: Optional[Dosage] = Field(
        description="Value of extension",
        default=None,
    )
    valueMeta: Optional[Meta] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def extension_slicing_cardinality_validator(cls, value):    
        return validate_slicing_cardinalities(cls, value, 
            field_name="extension",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Base64Binary, Boolean, Canonical, Code, Date, DateTime, Decimal, Id, Instant, Integer, Markdown, Oid, PositiveInt, String, Time, UnsignedInt, Uri, Url, Uuid, Address, Age, Annotation, Attachment, CodeableConcept, Coding, ContactPoint, Count, Distance, Duration, HumanName, Identifier, Money, Period, Quantity, Range, Ratio, Reference, SampledData, Signature, Timing, ContactDetail, Contributor, DataRequirement, Expression, ParameterDefinition, RelatedArtifact, TriggerDefinition, UsageContext, Dosage, Meta],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class Conducted(Extension):
    """
    CUP characterization conducted
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['conducted'] = Field(
        description="identifies the meaning of the extension",
        default="conducted",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Boolean],
            field_name_base="value",
            required=False,
        )

 
class Success(Extension):
    """
    CUP characterization successful
    """
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['success'] = Field(
        description="identifies the meaning of the extension",
        default="success",
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Boolean],
            field_name_base="value",
            required=False,
        )

 
class MolecularTumorBoardCUPCharacterization(FHIRSliceModel):
    """
    A characterization of the tumor board review focused on cancer of unknown primary (CUP) origin.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[List[Annotated[Union[Conducted, Success, Extension], Field(union_mode='left_to_right')]]] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-molecular-tumor-board-cup-characterization'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-molecular-tumor-board-cup-characterization",
    )
    valueBase64Binary: Optional[Base64Binary] = Field(
        description="Value of extension",
        default=None,
    )
    valueBoolean: Optional[Boolean] = Field(
        description="Value of extension",
        default=None,
    )
    valueCanonical: Optional[Canonical] = Field(
        description="Value of extension",
        default=None,
    )
    valueCode: Optional[Code] = Field(
        description="Value of extension",
        default=None,
    )
    valueDate: Optional[Date] = Field(
        description="Value of extension",
        default=None,
    )
    valueDateTime: Optional[DateTime] = Field(
        description="Value of extension",
        default=None,
    )
    valueDecimal: Optional[Decimal] = Field(
        description="Value of extension",
        default=None,
    )
    valueId: Optional[Id] = Field(
        description="Value of extension",
        default=None,
    )
    valueInstant: Optional[Instant] = Field(
        description="Value of extension",
        default=None,
    )
    valueInteger: Optional[Integer] = Field(
        description="Value of extension",
        default=None,
    )
    valueMarkdown: Optional[Markdown] = Field(
        description="Value of extension",
        default=None,
    )
    valueOid: Optional[Oid] = Field(
        description="Value of extension",
        default=None,
    )
    valuePositiveInt: Optional[PositiveInt] = Field(
        description="Value of extension",
        default=None,
    )
    valueString: Optional[String] = Field(
        description="Value of extension",
        default=None,
    )
    valueTime: Optional[Time] = Field(
        description="Value of extension",
        default=None,
    )
    valueUnsignedInt: Optional[UnsignedInt] = Field(
        description="Value of extension",
        default=None,
    )
    valueUri: Optional[Uri] = Field(
        description="Value of extension",
        default=None,
    )
    valueUrl: Optional[Url] = Field(
        description="Value of extension",
        default=None,
    )
    valueUuid: Optional[Uuid] = Field(
        description="Value of extension",
        default=None,
    )
    valueAddress: Optional[Address] = Field(
        description="Value of extension",
        default=None,
    )
    valueAge: Optional[Age] = Field(
        description="Value of extension",
        default=None,
    )
    valueAnnotation: Optional[Annotation] = Field(
        description="Value of extension",
        default=None,
    )
    valueAttachment: Optional[Attachment] = Field(
        description="Value of extension",
        default=None,
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Value of extension",
        default=None,
    )
    valueCoding: Optional[Coding] = Field(
        description="Value of extension",
        default=None,
    )
    valueContactPoint: Optional[ContactPoint] = Field(
        description="Value of extension",
        default=None,
    )
    valueCount: Optional[Count] = Field(
        description="Value of extension",
        default=None,
    )
    valueDistance: Optional[Distance] = Field(
        description="Value of extension",
        default=None,
    )
    valueDuration: Optional[Duration] = Field(
        description="Value of extension",
        default=None,
    )
    valueHumanName: Optional[HumanName] = Field(
        description="Value of extension",
        default=None,
    )
    valueIdentifier: Optional[Identifier] = Field(
        description="Value of extension",
        default=None,
    )
    valueMoney: Optional[Money] = Field(
        description="Value of extension",
        default=None,
    )
    valuePeriod: Optional[Period] = Field(
        description="Value of extension",
        default=None,
    )
    valueQuantity: Optional[Quantity] = Field(
        description="Value of extension",
        default=None,
    )
    valueRange: Optional[Range] = Field(
        description="Value of extension",
        default=None,
    )
    valueRatio: Optional[Ratio] = Field(
        description="Value of extension",
        default=None,
    )
    valueReference: Optional[Reference] = Field(
        description="Value of extension",
        default=None,
    )
    valueSampledData: Optional[SampledData] = Field(
        description="Value of extension",
        default=None,
    )
    valueSignature: Optional[Signature] = Field(
        description="Value of extension",
        default=None,
    )
    valueTiming: Optional[Timing] = Field(
        description="Value of extension",
        default=None,
    )
    valueContactDetail: Optional[ContactDetail] = Field(
        description="Value of extension",
        default=None,
    )
    valueContributor: Optional[Contributor] = Field(
        description="Value of extension",
        default=None,
    )
    valueDataRequirement: Optional[DataRequirement] = Field(
        description="Value of extension",
        default=None,
    )
    valueExpression: Optional[Expression] = Field(
        description="Value of extension",
        default=None,
    )
    valueParameterDefinition: Optional[ParameterDefinition] = Field(
        description="Value of extension",
        default=None,
    )
    valueRelatedArtifact: Optional[RelatedArtifact] = Field(
        description="Value of extension",
        default=None,
    )
    valueTriggerDefinition: Optional[TriggerDefinition] = Field(
        description="Value of extension",
        default=None,
    )
    valueUsageContext: Optional[UsageContext] = Field(
        description="Value of extension",
        default=None,
    )
    valueDosage: Optional[Dosage] = Field(
        description="Value of extension",
        default=None,
    )
    valueMeta: Optional[Meta] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def extension_slicing_cardinality_validator(cls, value):    
        return validate_slicing_cardinalities(cls, value, 
            field_name="extension",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[Base64Binary, Boolean, Canonical, Code, Date, DateTime, Decimal, Id, Instant, Integer, Markdown, Oid, PositiveInt, String, Time, UnsignedInt, Uri, Url, Uuid, Address, Age, Annotation, Attachment, CodeableConcept, Coding, ContactPoint, Count, Distance, Duration, HumanName, Identifier, Money, Period, Quantity, Range, Ratio, Reference, SampledData, Signature, Timing, ContactDetail, Contributor, DataRequirement, Expression, ParameterDefinition, RelatedArtifact, TriggerDefinition, UsageContext, Dosage, Meta],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class TumorBoardSpecialization(FHIRSliceModel):
    """
    The specialization or focus area of the tumor board conducting the review, such as hematologic malignancies or solid tumors.
    """
    id: Optional[String] = Field(
        description="Unique id for inter-element referencing",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    extension: Optional[Extension] = Field(
        description="Extension",
        default=None,
    )
    url: Literal['http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-tumor-board-specialization'] = Field(
        description="identifies the meaning of the extension",
        default="http://luisfabib.github.io/onconova/StructureDefinition/onconova-ext-tumor-board-specialization",
    )
    valueCodeableConcept: Optional[CodeableConcept] = Field(
        description="Value of extension",
        default=None,
    )
    @property 
    def value(self):
        return get_type_choice_value_by_base(self, 
            base="value",
        )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )




    @model_validator(mode="after")
    def value_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[CodeableConcept],
            field_name_base="value",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_ele_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_ext_1_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )

 
class MolecularTumorBoardCUPCharacterizationCode(CodeableConcept):
    """
    The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
    """
    extension: Optional[List[Annotated[Union[TumorBoardSpecialization, Extension], Field(union_mode='left_to_right')]]] = Field(
        description=None,
        default=None,
    )


    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def extension_slicing_cardinality_validator(cls, value):    
        return validate_slicing_cardinalities(cls, value, 
            field_name="extension",
        )


 
class TumorBoardSpecializationPerformer(BackboneElement):
    """
    Not used in this profile
    """
    function: Optional[CodeableConcept] = Field(
        description="Type of performance",
        default=None,
    )
    actor: Optional[Reference] = Field(
        description="The reference to the practitioner",
        default=None,
    )
    onBehalfOf: Optional[Reference] = Field(
        description="Organization the device or practitioner was acting for",
        default=None,
    )


    @field_validator(*('onBehalfOf', 'actor', 'function', 'modifierExtension', 'extension', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )


 
class TumorBoardSpecializationFocalDevice(BackboneElement):
    """
    A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
    """
    action: Optional[CodeableConcept] = Field(
        description="Kind of change to device",
        default=None,
    )
    manipulated: Optional[Reference] = Field(
        description="Device that was changed",
        default=None,
    )


    @field_validator(*('manipulated', 'action', 'modifierExtension', 'extension', 'modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )


 
class TumorBoardSpecialization(FHIRBaseModel):
    """
    A profile representing a specialized molecular tumor board review for a cancer patient. This profile extends the `OnconovaTumorBoardReview` profile to specify that the review is focused on molecular diagnostics and recommendations.
    """
    id: Optional[String] = Field(
        description="Logical id of this artifact",
        default=None,
    )
    id_ext: Optional[Element] = Field(
        description="Placeholder element for id extensions",
        default=None,
        alias="_id",
    )
    meta: Optional[Meta] = Field(
        title="Meta",
        description="Metadata about the resource.",
        default_factory=lambda: Meta(versionId='0.1.0', profile=['http://luisfabib.github.io/onconova/StructureDefinition/onconova-molecular-tumor-board-review']),
    )
    implicitRules: Optional[Uri] = Field(
        description="A set of rules under which this content was created",
        default=None,
    )
    implicitRules_ext: Optional[Element] = Field(
        description="Placeholder element for implicitRules extensions",
        default=None,
        alias="_implicitRules",
    )
    language: Optional[Code] = Field(
        description="Language of the resource content",
        default=None,
    )
    language_ext: Optional[Element] = Field(
        description="Placeholder element for language extensions",
        default=None,
        alias="_language",
    )
    text: Optional[Narrative] = Field(
        description="Text summary of the resource, for human interpretation",
        default=None,
    )
    contained: Optional[List[Resource]] = Field(
        description="Contained, inline Resources",
        default=None,
    )
    extension: Optional[List[Annotated[Union[MolecularTumorBoardTherapeuticRecommendation, MolecularTumorBoardMolecularComparison, MolecularTumorBoardCUPCharacterization, Extension], Field(union_mode='left_to_right')]]] = Field(
        description="CUP characterization(s)",
        default=None,
    )
    modifierExtension: Optional[List[Extension]] = Field(
        description="Extensions that cannot be ignored",
        default=None,
    )
    identifier: Optional[List[Identifier]] = Field(
        description="External Identifiers for this procedure",
        default=None,
    )
    instantiatesCanonical: Optional[List[Canonical]] = Field(
        description="Instantiates FHIR protocol or definition",
        default=None,
    )
    instantiatesCanonical_ext: Optional[Element] = Field(
        description="Placeholder element for instantiatesCanonical extensions",
        default=None,
        alias="_instantiatesCanonical",
    )
    instantiatesUri: Optional[List[Uri]] = Field(
        description="Instantiates external protocol or definition",
        default=None,
    )
    instantiatesUri_ext: Optional[Element] = Field(
        description="Placeholder element for instantiatesUri extensions",
        default=None,
        alias="_instantiatesUri",
    )
    basedOn: Optional[List[Reference]] = Field(
        description="Not used in this profile",
        default=None,
    )
    partOf: Optional[List[Reference]] = Field(
        description="Part of referenced event",
        default=None,
    )
    status: Code = Field(
        description="preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown",
        default="completed",
    )
    status_ext: Optional[Element] = Field(
        description="Placeholder element for status extensions",
        default=None,
        alias="_status",
    )
    statusReason: Optional[CodeableConcept] = Field(
        description="Reason for current status",
        default=None,
    )
    category: CodeableConcept = Field(
        description="Classification of the procedure",
        default_factory=lambda: CodeableConcept(coding=[{'system': 'http://snomed.info/sct', 'code': '103693007', 'display': 'Diagnostic procedure'}]),
    )
    code: MolecularTumorBoardCUPCharacterizationCode = Field(
        description="Identification of the procedure",
        default_factory=lambda: CodeableConcept(coding=[{'system': 'http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl', 'code': 'C93304', 'display': 'Tumor Board Review'}]),
    )
    subject: Optional[Reference] = Field(
        description="Who the procedure was performed on",
        default=None,
    )
    encounter: Optional[Reference] = Field(
        description="Encounter created as part of",
        default=None,
    )
    performedDateTime: Optional[DateTime] = Field(
        description="When the procedure was performed",
        default=None,
    )
    recorder: Optional[Reference] = Field(
        description="Not used in this profile",
        default=None,
    )
    asserter: Optional[Reference] = Field(
        description="Not used in this profile",
        default=None,
    )
    performer: Optional[List[TumorBoardSpecializationPerformer]] = Field(
        description="Not used in this profile",
        default=None,
    )
    location: Optional[Reference] = Field(
        description="Not used in this profile",
        default=None,
    )
    reasonCode: Optional[List[CodeableConcept]] = Field(
        description="Not used in this profile",
        default=None,
    )
    reasonReference: Optional[List[Reference]] = Field(
        description="The justification that the procedure was performed",
        default=None,
    )
    bodySite: Optional[List[CodeableConcept]] = Field(
        description="Not used in this profile",
        default=None,
    )
    outcome: Optional[CodeableConcept] = Field(
        description="Not used in this profile",
        default=None,
    )
    report: Optional[List[Reference]] = Field(
        description="Any report resulting from the procedure",
        default=None,
    )
    complication: Optional[List[CodeableConcept]] = Field(
        description="Not used in this profile",
        default=None,
    )
    complicationDetail: Optional[List[Reference]] = Field(
        description="Not used in this profile",
        default=None,
    )
    followUp: Optional[List[CodeableConcept]] = Field(
        description="Tumor Board Recommendation",
        default=None,
    )
    note: Optional[List[Annotation]] = Field(
        description="Additional information about the procedure",
        default=None,
    )
    focalDevice: Optional[List[TumorBoardSpecializationFocalDevice]] = Field(
        description="Manipulated, implanted, or removed device",
        default=None,
    )
    usedReference: Optional[List[Reference]] = Field(
        description="Items used during procedure",
        default=None,
    )
    usedCode: Optional[List[CodeableConcept]] = Field(
        description="Coded items used during the procedure",
        default=None,
    )
    resourceType: Literal['Procedure'] = Field(
        description=None,
        default="Procedure",
    )
    @property 
    def performed(self):
        return get_type_choice_value_by_base(self, 
            base="performed",
        )


    @field_validator(*('usedCode', 'usedReference', 'focalDevice', 'note', 'followUp', 'complicationDetail', 'complication', 'report', 'outcome', 'bodySite', 'reasonReference', 'reasonCode', 'location', 'performer', 'asserter', 'recorder', 'encounter', 'subject', 'code', 'category', 'statusReason', 'status', 'partOf', 'basedOn', 'instantiatesUri', 'instantiatesCanonical', 'identifier', 'modifierExtension', 'extension', 'text', 'language', 'implicitRules', 'meta'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ele_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="hasValue() or (children().count() > id.count())",
            human="All FHIR elements must have a @value or children",
            key="ele-1",
            severity="error",
        )



    @field_validator(*('modifierExtension', 'extension'), mode="after", check_fields=None)
    @classmethod
    def FHIR_ext_1_constraint_validator(cls, value):    
        return validate_element_constraint(cls, value, 
            expression="extension.exists() != value.exists()",
            human="Must have either extensions or value[x], not both",
            key="ext-1",
            severity="error",
        )



    @field_validator(*('extension',), mode="after", check_fields=None)
    @classmethod
    def extension_slicing_cardinality_validator(cls, value):    
        return validate_slicing_cardinalities(cls, value, 
            field_name="extension",
        )



    @field_validator(*('status',), mode="after", check_fields=None)
    @classmethod
    def FHIR_status_pattern_constraint(cls, value):    
        return validate_FHIR_element_pattern(cls, value, 
            pattern="completed",
        )



    @field_validator(*('category',), mode="after", check_fields=None)
    @classmethod
    def FHIR_category_pattern_constraint(cls, value):    
        return validate_FHIR_element_pattern(cls, value, 
            pattern=CodeableConcept(coding=[{'system': 'http://snomed.info/sct', 'code': '103693007', 'display': 'Diagnostic procedure'}]),
        )



    @field_validator(*('code',), mode="after", check_fields=None)
    @classmethod
    def FHIR_code_pattern_constraint(cls, value):    
        return validate_FHIR_element_pattern(cls, value, 
            pattern=CodeableConcept(coding=[{'system': 'http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl', 'code': 'C93304', 'display': 'Tumor Board Review'}]),
        )



    @field_validator(*('contained',), mode="plain", check_fields=None)
    @classmethod
    def contained_FHIR_resource_validator(cls, value):    
        return validate_contained_resource(cls, value, 
            release="R4",
        )




    @model_validator(mode="after")
    def performed_type_choice_validator(self):
        return validate_type_choice_element( 
            self,
            field_types=[DateTime],
            field_name_base="performed",
            required=False,
        )



    @model_validator(mode="after")
    def FHIR_dom_2_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.contained.empty()",
            human="If the resource is contained in another resource, it SHALL NOT contain nested Resources",
            key="dom-2",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_3_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.where((('#'+id in (%resource.descendants().reference | %resource.descendants().as(canonical) | %resource.descendants().as(uri) | %resource.descendants().as(url))) or descendants().where(reference = '#').exists() or descendants().where(as(canonical) = '#').exists() or descendants().where(as(canonical) = '#').exists()).not()).trace('unmatched', id).empty()",
            human="If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource or SHALL refer to the containing resource",
            key="dom-3",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_4_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated",
            key="dom-4",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_5_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="contained.meta.security.empty()",
            human="If a resource is contained in another resource, it SHALL NOT have a security label",
            key="dom-5",
            severity="error",
        )



    @model_validator(mode="after")
    def FHIR_dom_6_constraint_model_validator(self):
        return validate_model_constraint( 
            self,
            expression="text.`div`.exists()",
            human="A resource should have narrative for robust management",
            key="dom-6",
            severity="warning",
        )


